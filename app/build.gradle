import com.android.build.gradle.internal.pipeline.TransformManager
import com.blackHook.plugin.HookMethod
import org.objectweb.asm.MethodVisitor
import org.objectweb.asm.Opcodes

import static com.android.build.gradle.internal.pipeline.TransformManager.SCOPE_FULL_PROJECT
import static com.android.build.gradle.internal.pipeline.TransformManager.CONTENT_JARS
import static com.android.build.gradle.internal.pipeline.TransformManager.CONTENT_CLASS
import static com.android.build.gradle.internal.pipeline.TransformManager.PROJECT_ONLY

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.blackHook'
apply from: '../app/test.gradle'

void createHookThreadByteCode(MethodVisitor mv, String className) {
    mv.visitFieldInsn(Opcodes.GETSTATIC, "com/quwan/tt/asmdemoapp/ThreadCheck", "INSTANCE", "Lcom/quwan/tt/asmdemoapp/ThreadCheck;")
    mv.visitLdcInsn(className)
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/quwan/tt/asmdemoapp/ThreadCheck", "printThread", "(Ljava/lang/String;)V", false)
}

void startHook() {

//    addHookMethod("java/lang/Thread", "<init>", "()V", { MethodVisitor mv ->
//        createHookThreadByteCode(mv, "java/lang/Thread")
//    })
//
//    addHookMethod("android/os/AsyncTask", "<init>", "()V", { MethodVisitor mv ->
//        createHookThreadByteCode(mv, "android/os/AsyncTask")
//    })
//
//    addHookMethod("android/os/HandlerThread", "<init>", "()V", { MethodVisitor mv ->
//        createHookThreadByteCode(mv, "android/os/HandlerThread")
//    })
//
    addHookMethod("com/quwan/tt/asmdemoapp/BaseActivity", "getFactory2", "()Landroid/view/LayoutInflater\$Factory2;", { MethodVisitor mv ->
        mv.visitTypeInsn(Opcodes.NEW, "com/quwan/tt/asmdemoapp/ImageViewFactory2")
        mv.visitInsn(Opcodes.DUP)
        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "com/quwan/tt/asmdemoapp/ImageViewFactory2", "<init>", "()V", false)
    })

//    blackHook {
//        isLog true
//        text ""
//        hookMethodList [
//               HookMethod("","","",{MethodVisitor mv ->
//
//               })
//        ]
////        methodHooker = { MethodVisitor mv, int opcode, String className, String methodName, String descriptor, boolean isInterface ->
////            System.out.println("====>owner123:" + className);
////            System.out.println("====>methodName:" + methodName)
////            System.out.println("====>descriptor:" + descriptor)
////
////            for (int i = 0; i < blackHook.blackHookList.size(); i++) {
////                def hookMethod = blackHook.blackHookList.get(i)
////                if (className == hookMethod.className && methodName == hookMethod.methodName && descriptor == hookMethod.descriptor) {
////                    hookMethod.createBytecode.call(mv)
////                }
////            }
////
////        }
//    }
}

List<HookMethod> getHookMethods() {
    List<HookMethod> hookMethodList = new ArrayList<>()
    hookMethodList.add(new HookMethod("java/lang/Thread", "<init>", "()V", { MethodVisitor mv -> createHookThreadByteCode(mv, "java/lang/Thread") }))
    hookMethodList.add(new HookMethod("android/os/AsyncTask", "<init>", "()V", { MethodVisitor mv -> createHookThreadByteCode(mv, "android/os/AsyncTask") }))
    hookMethodList.add(new HookMethod("android/os/HandlerThread", "<init>", "()V", { MethodVisitor mv -> createHookThreadByteCode(mv, "android/os/HandlerThread") }))
    hookMethodList.add(new HookMethod("com/quwan/tt/asmdemoapp/BaseActivity", "getFactory2", "()Landroid/view/LayoutInflater\$Factory2;", { MethodVisitor mv ->
        mv.visitTypeInsn(Opcodes.NEW, "com/quwan/tt/asmdemoapp/ImageViewFactory2")
        mv.visitInsn(Opcodes.DUP)
        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "com/quwan/tt/asmdemoapp/ImageViewFactory2", "<init>", "()V", false)
    }))

    return hookMethodList
}


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.quwan.tt.asmdemoapp"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation project(path: ':mylibrary')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
}

boolean isCakHook = true

if (!isCakHook) return

blackHook {
    //表示要处理的数据类型是什么，CLASSES 表示要处理编译后的字节码(可能是 jar 包也可能是目录)，RESOURCES 表示要处理的是标准的 java 资源
    inputTypes = CONTENT_CLASS
    //表示Transform 的作用域，这里设置的SCOPE_FULL_PROJECT代表作用域是全工程
    scopes = SCOPE_FULL_PROJECT
    //表示是否支持增量编译，false不支持
    isIncremental false
    //表示hook的方法
    hookMethodList = getHookMethods()
}
