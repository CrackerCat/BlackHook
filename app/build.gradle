import com.android.build.gradle.internal.pipeline.TransformManager
import com.blackHook.plugin.HookMethod
import org.objectweb.asm.MethodVisitor
import org.objectweb.asm.Opcodes
import com.blackHook.plugin.BlackHook

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.blackHook'
apply from: '../app/test.gradle'

/**
 * 返回hook线程构造函数的字节码
 */
void createHookThreadByteCode(MethodVisitor mv, String className) {
    mv.visitFieldInsn(Opcodes.GETSTATIC, "com/csp/myapplication/ThreadCheck", "INSTANCE", "Lcom/csp/myapplication/ThreadCheck;")
    mv.visitLdcInsn(className)
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "com/csp/myapplication/ThreadCheck", "printThread", "(Ljava/lang/String;)V", false)
}

/**
 * 返回需要被hook的方法
 */
List<HookMethod> getHookMethods() {
    List<HookMethod> hookMethodList = new ArrayList<>()
    hookMethodList.add(new HookMethod("java/lang/Thread", "<init>", "()V", { MethodVisitor mv -> createHookThreadByteCode(mv, "java/lang/Thread") }))
    hookMethodList.add(new HookMethod("android/os/AsyncTask", "<init>", "()V", { MethodVisitor mv -> createHookThreadByteCode(mv, "android/os/AsyncTask") }))
    hookMethodList.add(new HookMethod("android/os/HandlerThread", "<init>", "()V", { MethodVisitor mv -> createHookThreadByteCode(mv, "android/os/HandlerThread") }))
    hookMethodList.add(new HookMethod("com/quwan/tt/asmdemoapp/MainActivity", "onCreate", "(Landroid/os/Bundle;)V", { MethodVisitor mv ->
        println("====>com/quwan/tt/asmdemoapp/MainActivity")
        methodVisitor.visitLdcInsn("====>MainActivity")
        methodVisitor.visitLdcInsn("\u6d4b\u8bd5\u63d2\u5165\u65e5\u5fd7")
        methodVisitor.visitMethodInsn(INVOKESTATIC, "android/util/Log", "i", "(Ljava/lang/String;Ljava/lang/String;)I", false)
        methodVisitor.visitInsn(POP)
    }))
    return hookMethodList
}

/**
 * 用DSL的方式使用插件
 */
def startHook() {
    blackHook {
        //表示要处理的数据类型是什么，CLASSES 表示要处理编译后的字节码(可能是 jar 包也可能是目录)，RESOURCES 表示要处理的是标准的 java 资源
        inputTypes BlackHook.CONTENT_CLASS
        //表示Transform 的作用域，这里设置的SCOPE_FULL_PROJECT代表作用域是全工程
        scopes BlackHook.SCOPE_FULL_PROJECT
        //表示是否支持增量编译，false不支持
        isIncremental false
        //是否打印扫描到的方法的信息，包含类名，方法名，方法签名
        isNeedLog true
        //表示需要被hook的方法
        hookMethodList = getHookMethods()
    }
}

/**
 * 是否是线下环境，线下环境才可以依赖BlackHook
 */
boolean isCanApplyBlackHook() {
    boolean isCanApplyBlackHook = false
    def file = rootProject.file("local.properties")
    if (file.exists()) {
        DataInputStream dataInputStream = rootProject.file("local.properties").newDataInputStream()
        Properties properties = new Properties()
        properties.load(dataInputStream)
        if (!properties.containsKey("isNeedBlackHook") || properties.getProperty("isNeedBlackHook") == "true") {
            isCanApplyBlackHook = true
        }
    } else {
        def isNeedBlackHook = project.properties.getOrDefault("IS_NEED_BLACK_HOOK", false) == "true"
        if (isNeedBlackHook) {
            isCanApplyBlackHook = true
        }
    }
    return isCanApplyBlackHook
}

if (isCanApplyBlackHook()) {
    apply plugin: 'com.blackHook'
    startHook()
}


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.quwan.tt.asmdemoapp"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation project(path: ':mylibrary')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
}

boolean isCakHook = true

if (!isCakHook) return

blackHook {
    //表示要处理的数据类型是什么，CLASSES 表示要处理编译后的字节码(可能是 jar 包也可能是目录)，RESOURCES 表示要处理的是标准的 java 资源
    inputTypes BlackHook.CONTENT_CLASS
    //表示Transform 的作用域，这里设置的SCOPE_FULL_PROJECT代表作用域是全工程
    scopes BlackHook.SCOPE_FULL_PROJECT
    //表示是否支持增量编译，false不支持
    isIncremental false
    //表示hook的方法
    hookMethodList = getHookMethods()
}
